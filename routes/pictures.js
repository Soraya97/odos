// ------ REQUIRE ------
const express = require('express');
const router = express.Router({
  mergeParams: true
});const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;
const debug = require('debug')('demo:people');
const utils = require('./utils');

// ------ WEBSOCKET ------
const webSocket = require('../websocket/dispatcher');

// ------ MODELS ------
const Picture = require('../models/picture');
const List = require('../models/list');


// ------ RESOURCES ODOS ------


/**
 * @api {get} /users/:userId/pictures Retrieve all pictures
 * @apiName RetrievePictures
 * @apiGroup Picture
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a list of pictures
 *
 * @apiUse PictureInResponseBody
 * @apiUse PictureIncludes
 * @apiUse PictureNotFoundError
 *
 * @apiExample Example
 *     GET /users/5f981e64eeac3042b0e27b86/pictures HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 * 
 */
/**
 * Show all pictures
 * Add a aggregation to count pictures for a liste // je ne sais pas s'il faut finalement le faire ?
 * Example : http://localhost:3000/users/:userId/pictures
 * Pagination
 * Example : http://localhost:3000/users/:userId/pictures?pageSize=3
 */
 router.get('/pictures', function (req, res, next) {
  Picture.find().count(function (err, total) {
    if (err) {
      return next(err);
    }

    // Parse pagination parameters from URL query parameters
    const { page, pageSize } = func.getPaginationParameters(req);

    // Aggregation
    Picture.aggregate([
      {
        $lookup: {
          from: 'lists',
          localField: '_id',
          foreignField: 'pictureId',
          as: 'listedPicture'
        }
      },
      {
        $unwind:
        {
          path: "$listedPicture",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $addFields: {
          listedPicture: {
            $cond: {
              if: '$listedPicture',
              then: 1,
              else: 0
            }
          }
        }
      },
      {
        $group: {
          _id: '$_id',
          description: { $first: '$description' },
          location: { $first: '$location' },
          picture: { $first: '$picture' },
          creation_date: { $first: '$creation_date' },
          last_mod_date: { $first: '$last_mod_date' },
          listedPicture: { $sum: '$listedPicture' }
        }
      },
      {
        $sort: {
          description: 1
        }
      },
      {
        $skip: (page - 1) * pageSize
      },
      {
        $limit: pageSize
      }
    ], (err, pictures) => {
      if (err) {
        return next(err);
      }
      console.log(pictures);

      // Add the Link header to the response
      func.addLinkHeader('/pictures', page, pageSize, total, res);

      // Websocket
      const nbPictures = pictures.length;
      webSocket.nbPictures(nbPictures);

      res.send(pictures.map(picture => {

        // Transform the aggregated object into a Mongoose model.
        const serialized = new Picture(picture).toJSON();

        // Add the aggregated property.
        serialized.listedPicture = picture.listedPicture;

        return serialized;
      }));
    });
  });
});


/* GET pictures listing. */
router.get('/', utils.authenticate, authorization, function (req, res, next) {
  Picture
  .find({
    userId: req.currentUserId
  })
  .sort('picture')
  .exec(function (err, pictures) {
    if (err) {
      return next(err);
    }
    res.send(pictures);
  });
});


/**
 * @api {get} /users/:userId/pictures/:pictureId Retrieve a picture
 * @apiName RetrievePicture
 * @apiGroup Picture
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one Picture.
 *
 * @apiUse PictureIdInUrlPath
 * @apiUse PictureInResponseBody
 * @apiUse PictureIncludes
 * @apiUse PictureNotFoundError
 *
 * @apiExample Example
 *     GET /users/5f981e64eeac3042b0e27b86/pictures/ HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     [{
 * 
 *      }]
 */
router.get('/:pictureId', utils.authenticate, getPicture, authorizationUserPicture, function (req, res, next) {
  res.send(req.picture);
});


// -- POST --
/**
 * Create a picture
 * Example : http://localhost:3000/users/:uersId/pictures
 * Example body for Postman :
  {
       "description": "First picture",
       "location":
       {
            "type": "Point",
            "coordinates": [ 48.862725, 2.287592 ]
       },
        "picture": "https://source.unsplash.com/random"
  }
 */

/**
 * @api {post} /users/:userId/pictures Create a picture
 * @apiName CreatePicture
 * @apiGroup Picture
 * @apiVersion 1.0.0
 * @apiDescription Create a new Picture.
 *
 * @apiUse PictureInRequestBody
 * @apiUse PictureInResponseBody
 * @apiUse PictureValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the picture generated by the server
 *
 * @apiExample Example
 *     POST /users/5f981e64eeac3042b0e27b86/pictures HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "name": "Vacances",
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://odos-archioweb.herokuapp.com/5f981e64eeac3042b0e27b86
 *
 *     [{
 *        "picture":[],
 *        "public":true,
 *        "_id":"5f98321aabf23b2cfce0fe76",
 *        "name":"Vacances",
 *        "creationDate":"2020-10-27T14:43:38.484Z",
 *        "modificationDate":"2020-10-27T14:43:38.485Z",
 *        "user":"5f981e64eeac3042b0e27b86","__v":0}
 *      }]
 */
router.post('/', utils.authenticate, authorization, getPicture, function (req, res, next) {
  // Retrieve the user ID from the URL.
  const user = req.params.userId;
  // Create a new picture from the JSON in the request body
  const newPicture = new Picture(req.body);
  newPicture.set('userId', user);
  // Save that document
  newPicture.save(function (err, savedPicture) {
    if (err) {
      return next(err);
    }
    // Send the saved document in the response
    debug(`New picture "${savedPicture.description}"`);
    res.status(201).send(savedPicture);
  });
});


/**
 * @api {patch} /users/:userId/pictures/:pictureId Partially update a picture 
 * @apiName PartiallyUpdatePicture
 * @apiGroup Picture
 * @apiVersion 1.0.0
 * @apiDescription Partially updates a picture's data (only the properties found in the request body will be updated).
 * All properties are optional.
 *
 * @apiUse PictureIdInUrlPath
 * @apiUse PictureInRequestBody
 * @apiUse PictureInResponseBody
 * @apiUse PictureNotFoundError
 * @apiUse PictureValidationError
 *
 * @apiExample Example
 *     PATCH /users/5f981e64eeac3042b0e27b86/pictures/ HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "name": Plages
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *      [{
 *        "picture":[],
 *        "public":true,
 *        "_id":"5f98321aabf23b2cfce0fe76",
 *        "name":"Plages",
 *        "creationDate":"2020-10-27T14:43:38.484Z",
 *        "modificationDate":"2020-10-27T14:43:38.485Z",
 *        "user":"5f981e64eeac3042b0e27b86","__v":0}
 *      }]
 */
router.patch('/:pictureId', utils.authenticate, getPicture, authorizationUserPicture, function (req, res, next) {
  // res.send(req.picture.name);
  // Update all properties (regardless of whether they are in the request body or not)
  if (req.body.description !== undefined) {
    req.picture.description = req.body.description;
  }

  if (req.body.picture !== undefined) {
    req.picture.picture = req.body.picture;
  }

  req.picture.last_mod_date = new Date();

  req.picture.save(function (err, savedPicture) {
    if (err) {
      return next(err);
    }

    debug(`Updated picture "${savedPicture.description}"`);
    res.send(savedPicture);
  });
});



/**
* @api {delete} /users/:userId/pictures/:pictureId Delete a picture
* @apiName DeletePicture
* @apiGroup Picture
* @apiVersion 1.0.0
* @apiDescription Permanently deletes a picture.
*
* @apiUse PictureIdInUrlPath
* @apiUse PictureNotFoundError
*
* @apiExample Example
*     DELETE /users/5f981e64eeac3042b0e27b86/pictures/ HTTP/1.1
*
* @apiSuccessExample 204 No Content
*     HTTP/1.1 204 No Content
*/
router.delete('/:pictureId', utils.authenticate, getPicture, authorizationUserPicture, function (req, res, next) {
  req.picture.remove(function (err) {
    if (err) {
      return next(err);
    }

    debug(`Deleted picture "${req.picture.description}"`);
    res.sendStatus(204);
  });
});

// Get the picture by id
function getPicture(req, res, next) {
  // get the id of the picture by the param
  const pictureId = req.params.pictureId;
  // if (!ObjectId.isValid(pictureId)) {
  //   return pictureNotFound(res, pictureId);
  // }
  // get the picture by id
  Picture.findById(req.params.pictureId, function (err, picture) {
    if (err) {
      return next(err);
    } // else if (!picture) {
    //   return pictureNotFound(res, pictureId);
    // }

    req.picture = picture;
    next();
  });
}

// Authorization to do something with the id of user in the param
function authorization(req, res, next) {
  // Authorization
  if (req.currentUserId != req.params.userId) {
    return res.status(403).send("You're not allowed to do that")
  }
  next();
}

// Authorization to do something with the id of user in the param and the id of the user on the picture
function authorizationUserPicture(req, res, next) {
  // Authorization
  if (req.currentUserId != req.params.userId || req.currentUserId != req.picture.userId) {
    return res.status(403).send("You're not allowed to do that")
  }
  next();
}


/**
 * getPicture: loads the picture corresponding to the ID in the URL path.
 * Responds with 404 Not Found if the ID is not valid or the picture doesn't exist.
 */
// function getPicture(req, res, next) {
//
//   const pictureId = req.params.id;
//   if (!ObjectId.isValid(pictureId)) {
//     return pictureNotFound(res, pictureId);
//   }
//
//   let query = Picture.findById(pictureId)
//   // Populate the picture if indicated in the "include" URL query parameter
//   if (utils.responseShouldInclude(req, 'picture')) {
//     query = query.populate('pictureId');
//   }
//
//   query.exec(function (err, picture) {
//     if (err) {
//       return next(err);
//     } else if (!picture) {
//       return pictureNotFound(res, pictureId);
//     }
//
//     req.picture = picture;
//     next();
//   });
// }

/**
 * Responds with 404 Not Found and a message indicating that the movie with the specified ID was not found.
 */
function pictureNotFound(res, pictureId) {
  return res.status(404).type('text').send(`No picture found with ID ${pictureId}`);
}


/**
 * @apiDefine PictureIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the picture to retrieve
 */

/**
 * @apiDefine PictureInRequestBody
 * @apiParam (Request body) {String{3...50}} description The description of the picture (must be unique)
 * @apiParam (Request body) {String} location The location of the picture
 * @apiParam (Request body) {Number} coordinates Coordinates of the picture
 * @apiParam (Request body) {String} picture The url of the picture
 * */

/**
 * @apiDefine PictureInResponseBody
 * @apiSuccess (Response body) {String{3...50}} description The description of the picture (must be unique)
 * @apiSuccess (Response body) {String} location The location of the picture
 * @apiSuccess (Response body) {Number} coordinates Coordinates of the picture
 * @apiSuccess (Response body) {String} picture The url of the picture
 * @apiSuccess (Response body) {Date} creation_date The date of the picture's creation
 * @apiSuccess (Response body) {Date} last_mod_date The date at which the picture was modified
 * @apiSuccess (Response body) {Schema.Types.ObjectId} userId An Id who is referencing to the user who create the picture
 */

 /**
 * @apiDefine PictureIncludes
 */

/**
 * @apiDefine PictureNotFoundError
 *
 * @apiError {Object} 404/NotFound No Picture was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No Picture found with ID ..
 */

/**
 * @apiDefine PictureValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the Picture's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "errors": {
 *         "name": ValidatorError: List name Oarty already exists {
 *           "properties": [Object],
 *           "kind": "unique",
 *           "path": "name",
 *           "value": "Party",
 *           "reason": undefined,
 *           [Symbol(mongoose:validatorError)]: true
 *         }
 *       },
 *      "_message": "List validation failed"
 *     }
 */
module.exports = router;
